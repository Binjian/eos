from _typeshed import Incomplete

__VERSION__: str
xrange = range
basestring = str
unicode = str
long = int
itervalues: Incomplete
iteritems: Incomplete

def unicode_escape_decode(x): ...
def ProcessHppHeadersOption(val) -> None: ...
def IsHeaderExtension(file_extension): ...
def GetHeaderExtensions(): ...
def GetAllExtensions(): ...
def GetNonHeaderExtensions(): ...
def ParseNolintSuppressions(filename, raw_line, linenum, error) -> None: ...
def ProcessGlobalSuppresions(lines) -> None: ...
def ResetNolintSuppressions() -> None: ...
def IsErrorSuppressedByNolint(category, linenum): ...
def Match(pattern, s): ...
def ReplaceAll(pattern, rep, s): ...
def Search(pattern, s): ...

class _IncludeState:
    include_list: Incomplete
    def __init__(self) -> None: ...
    def FindHeader(self, header): ...
    def ResetSection(self, directive) -> None: ...
    def SetLastHeader(self, header_path) -> None: ...
    def CanonicalizeAlphabeticalOrder(self, header_path): ...
    def IsInAlphabeticalOrder(self, clean_lines, linenum, header_path): ...
    def CheckNextIncludeOrder(self, header_type): ...

class _CppLintState:
    verbose_level: int
    error_count: int
    filters: Incomplete
    counting: str
    errors_by_category: Incomplete
    quiet: bool
    output_format: str
    def __init__(self) -> None: ...
    def SetOutputFormat(self, output_format) -> None: ...
    def SetQuiet(self, quiet): ...
    def SetVerboseLevel(self, level): ...
    def SetCountingStyle(self, counting_style) -> None: ...
    def SetFilters(self, filters) -> None: ...
    def AddFilters(self, filters) -> None: ...
    def BackupFilters(self) -> None: ...
    def RestoreFilters(self) -> None: ...
    def ResetErrorCounts(self) -> None: ...
    def IncrementErrorCount(self, category) -> None: ...
    def PrintErrorCounts(self) -> None: ...
    def PrintInfo(self, message) -> None: ...
    def PrintError(self, message) -> None: ...
    def AddJUnitFailure(
        self, filename, linenum, message, category, confidence
    ) -> None: ...
    def FormatJUnitXML(self): ...

class _FunctionState:
    in_a_function: bool
    lines_in_function: int
    current_function: str
    def __init__(self) -> None: ...
    def Begin(self, function_name) -> None: ...
    def Count(self) -> None: ...
    def Check(self, error, filename, linenum) -> None: ...
    def End(self) -> None: ...

class _IncludeError(Exception): ...

class FileInfo:
    def __init__(self, filename) -> None: ...
    def FullName(self): ...
    def RepositoryName(self): ...
    def Split(self): ...
    def BaseName(self): ...
    def Extension(self): ...
    def NoExtension(self): ...
    def IsSource(self): ...

def Error(filename, linenum, category, confidence, message) -> None: ...
def IsCppString(line): ...
def CleanseRawStrings(raw_lines): ...
def FindNextMultiLineCommentStart(lines, lineix): ...
def FindNextMultiLineCommentEnd(lines, lineix): ...
def RemoveMultiLineCommentsFromRange(lines, begin, end) -> None: ...
def RemoveMultiLineComments(filename, lines, error) -> None: ...
def CleanseComments(line): ...

class CleansedLines:
    elided: Incomplete
    lines: Incomplete
    raw_lines: Incomplete
    num_lines: Incomplete
    lines_without_raw_strings: Incomplete
    def __init__(self, lines) -> None: ...
    def NumLines(self): ...

def FindEndOfExpressionInLine(line, startpos, stack): ...
def CloseExpression(clean_lines, linenum, pos): ...
def FindStartOfExpressionInLine(line, endpos, stack): ...
def ReverseCloseExpression(clean_lines, linenum, pos): ...
def CheckForCopyright(filename, lines, error) -> None: ...
def GetIndentLevel(line): ...
def PathSplitToList(path): ...
def GetHeaderGuardCPPVariable(filename): ...
def CheckForHeaderGuard(filename, clean_lines, error) -> None: ...
def CheckHeaderFileIncluded(filename, include_state, error) -> None: ...
def CheckForBadCharacters(filename, lines, error) -> None: ...
def CheckForNewlineAtEOF(filename, lines, error) -> None: ...
def CheckForMultilineCommentsAndStrings(
    filename, clean_lines, linenum, error
) -> None: ...
def CheckPosixThreading(filename, clean_lines, linenum, error) -> None: ...
def CheckVlogArguments(filename, clean_lines, linenum, error) -> None: ...
def CheckInvalidIncrement(filename, clean_lines, linenum, error) -> None: ...
def IsMacroDefinition(clean_lines, linenum): ...
def IsForwardClassDeclaration(clean_lines, linenum): ...

class _BlockInfo:
    starting_linenum: Incomplete
    seen_open_brace: Incomplete
    open_parentheses: int
    inline_asm: Incomplete
    check_namespace_indentation: bool
    def __init__(self, linenum, seen_open_brace) -> None: ...
    def CheckBegin(self, filename, clean_lines, linenum, error) -> None: ...
    def CheckEnd(self, filename, clean_lines, linenum, error) -> None: ...
    def IsBlockInfo(self): ...

class _ExternCInfo(_BlockInfo):
    def __init__(self, linenum) -> None: ...

class _ClassInfo(_BlockInfo):
    name: Incomplete
    is_derived: bool
    check_namespace_indentation: bool
    access: str
    is_struct: bool
    class_indent: Incomplete
    last_line: int
    def __init__(self, name, class_or_struct, clean_lines, linenum) -> None: ...
    def CheckBegin(self, filename, clean_lines, linenum, error) -> None: ...
    def CheckEnd(self, filename, clean_lines, linenum, error) -> None: ...

class _NamespaceInfo(_BlockInfo):
    name: Incomplete
    check_namespace_indentation: bool
    def __init__(self, name, linenum) -> None: ...
    def CheckEnd(self, filename, clean_lines, linenum, error) -> None: ...

class _PreprocessorInfo:
    stack_before_if: Incomplete
    stack_before_else: Incomplete
    seen_else: bool
    def __init__(self, stack_before_if) -> None: ...

class NestingState:
    stack: Incomplete
    previous_stack_top: Incomplete
    pp_stack: Incomplete
    def __init__(self) -> None: ...
    def SeenOpenBrace(self): ...
    def InNamespaceBody(self): ...
    def InExternC(self): ...
    def InClassDeclaration(self): ...
    def InAsmBlock(self): ...
    def InTemplateArgumentList(self, clean_lines, linenum, pos): ...
    def UpdatePreprocessor(self, line) -> None: ...
    def Update(self, filename, clean_lines, linenum, error) -> None: ...
    def InnermostClass(self): ...
    def CheckCompletedBlocks(self, filename, error) -> None: ...

def CheckForNonStandardConstructs(
    filename, clean_lines, linenum, nesting_state, error
) -> None: ...
def CheckSpacingForFunctionCall(filename, clean_lines, linenum, error) -> None: ...
def IsBlankLine(line): ...
def CheckForNamespaceIndentation(
    filename, nesting_state, clean_lines, line, error
) -> None: ...
def CheckForFunctionLengths(
    filename, clean_lines, linenum, function_state, error
) -> None: ...
def CheckComment(line, filename, linenum, next_line_start, error) -> None: ...
def CheckSpacing(filename, clean_lines, linenum, nesting_state, error) -> None: ...
def CheckOperatorSpacing(filename, clean_lines, linenum, error) -> None: ...
def CheckParenthesisSpacing(filename, clean_lines, linenum, error) -> None: ...
def CheckCommaSpacing(filename, clean_lines, linenum, error) -> None: ...
def CheckBracesSpacing(
    filename, clean_lines, linenum, nesting_state, error
) -> None: ...
def IsDecltype(clean_lines, linenum, column): ...
def CheckSectionSpacing(filename, clean_lines, class_info, linenum, error) -> None: ...
def GetPreviousNonBlankLine(clean_lines, linenum): ...
def CheckBraces(filename, clean_lines, linenum, error) -> None: ...
def CheckTrailingSemicolon(filename, clean_lines, linenum, error) -> None: ...
def CheckEmptyBlockBody(filename, clean_lines, linenum, error) -> None: ...
def FindCheckMacro(line): ...
def CheckCheck(filename, clean_lines, linenum, error) -> None: ...
def CheckAltTokens(filename, clean_lines, linenum, error) -> None: ...
def GetLineWidth(line): ...
def CheckStyle(
    filename, clean_lines, linenum, file_extension, nesting_state, error
) -> None: ...
def CheckIncludeLine(filename, clean_lines, linenum, include_state, error) -> None: ...
def CheckLanguage(
    filename, clean_lines, linenum, file_extension, include_state, nesting_state, error
) -> None: ...
def CheckGlobalStatic(filename, clean_lines, linenum, error) -> None: ...
def CheckPrintf(filename, clean_lines, linenum, error) -> None: ...
def IsDerivedFunction(clean_lines, linenum): ...
def IsOutOfLineMethodDefinition(clean_lines, linenum): ...
def IsInitializerList(clean_lines, linenum): ...
def CheckForNonConstReference(
    filename, clean_lines, linenum, nesting_state, error
) -> None: ...
def CheckCasts(filename, clean_lines, linenum, error) -> None: ...
def CheckCStyleCast(filename, clean_lines, linenum, cast_type, pattern, error): ...
def ExpectingFunctionArgs(clean_lines, linenum): ...
def FilesBelongToSameModule(filename_cc, filename_h): ...
def UpdateIncludeState(filename, include_dict, io=...): ...
def CheckForIncludeWhatYouUse(
    filename, clean_lines, include_state, error, io=...
) -> None: ...
def CheckMakePairUsesDeduction(filename, clean_lines, linenum, error) -> None: ...
def CheckRedundantVirtual(filename, clean_lines, linenum, error) -> None: ...
def CheckRedundantOverrideOrFinal(filename, clean_lines, linenum, error) -> None: ...
def IsBlockInNameSpace(nesting_state, is_forward_declaration): ...
def ShouldCheckNamespaceIndentation(
    nesting_state, is_namespace_indent_item, raw_lines_no_comments, linenum
): ...
def CheckItemIndentationInNamespace(
    filename, raw_lines_no_comments, linenum, error
) -> None: ...
def ProcessLine(
    filename,
    file_extension,
    clean_lines,
    line,
    include_state,
    function_state,
    nesting_state,
    error,
    extra_check_functions: Incomplete | None = ...,
) -> None: ...
def FlagCxx11Features(filename, clean_lines, linenum, error) -> None: ...
def FlagCxx14Features(filename, clean_lines, linenum, error) -> None: ...
def ProcessFileData(
    filename,
    file_extension,
    lines,
    error,
    extra_check_functions: Incomplete | None = ...,
) -> None: ...
def ProcessConfigOverrides(filename): ...
def ProcessFile(
    filename, vlevel, extra_check_functions: Incomplete | None = ...
) -> None: ...
def PrintUsage(message) -> None: ...
def PrintVersion() -> None: ...
def PrintCategories() -> None: ...
def ParseArguments(args): ...
def main() -> None: ...
