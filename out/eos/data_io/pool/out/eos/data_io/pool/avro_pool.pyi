from typing import Optional

import dask.bag as db
import pandas as pd
from _typeshed import Incomplete as Incomplete
from dask.bag import Bag as Bag

from eos.data_io.pool.dask_pool import DaskPool as DaskPool
from eos.data_io.struct import PoolQuery as PoolQuery

class AvroPool(DaskPool):
    dbg: db.Bag
    dbg_schema: dict
    logger: Incomplete
    dictLogger: Incomplete
    def __post_init__(self) -> None: ...
    input_metadata: Incomplete
    bEmpty: bool
    def load(self) -> None: ...
    def close(self) -> None: ...
    def store(self, episode: pd.DataFrame) -> None: ...
    def get_query(self, query: Optional[PoolQuery] = ...) -> Bag: ...
    def find(self, query: PoolQuery) -> Optional[pd.DataFrame]: ...
    def delete(self, idx) -> None: ...
    def remove_episode(self, query: PoolQuery) -> None: ...
    def sample(
        self, size: int = ..., *, query: Optional[PoolQuery] = ...
    ) -> pd.DataFrame: ...
    def __iter__(self): ...
    def __init__(
        self, *, recipe, query, meta, pl_path, input_metadata, bEmpty, dbg, dbg_schema
    ) -> None: ...
