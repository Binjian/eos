from typing import Dict

import numpy as np
import pandas as pd

def assemble_state_ser(motion_power: pd.DataFrame) -> pd.Series: ...
def assemble_reward_ser(
    motion_power: pd.DataFrame, obs_sampling_rate: int
) -> pd.Series: ...
def assemble_action_ser(
    torque_map_line: np.ndarray,
    torque_table_row_names: list[str],
    table_start: int,
    flash_start_ts: pd.Timestamp,
    flash_end_ts: pd.Timestamp,
    torque_table_row_num_flash: int,
    torque_table_col_num: int,
    speed_scale: tuple,
    pedal_scale: tuple,
) -> pd.Series: ...
def nest(d: dict) -> dict: ...
def df_to_nested_dict(df_multi_indexed_col: pd.DataFrame) -> dict: ...
def eos_df_to_nested_dict(episode: pd.DataFrame) -> dict: ...
def ep_nest(d: Dict) -> Dict: ...
def df_to_ep_nested_dict(df_multi_indexed_col: pd.DataFrame) -> dict: ...
def avro_ep_encoding(episode: pd.DataFrame) -> list[Dict]: ...
def avro_ep_decoding(episodes: list[Dict]) -> list[pd.DataFrame]: ...
def decode_mongo_records(
    df: pd.DataFrame, torque_table_row_names: list[str]
) -> tuple[
    list[pd.DataFrame], list[pd.DataFrame], list[pd.DataFrame], list[pd.DataFrame]
]: ...
def decode_mongo_episodes(df: pd.DataFrame) -> pd.DataFrame: ...
def decode_dataframe_from_parquet(df: pd.DataFrame): ...
def decode_episode_dataframes_to_padded_arrays(
    batch: pd.DataFrame,
) -> tuple[np.ndarray, np.ndarray, np.ndarray, np.ndarray]: ...
