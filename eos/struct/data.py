from __future__ import annotations
from datetime import datetime
from typing import Any, TypeVar, Dict, List, Optional, Generic
from typing_extensions import NotRequired, TypedDict
from bson import ObjectId
from numpy import ndarray

#  Define TypedDict for type hinting of typed collections: records and episodes


class ObservationSpecs(TypedDict):
    """Observation of the episode."""

    velocity_unit: str  # unit of velocity, default "kmph"
    thrust_unit: str  # unit of thrust, default "percentage"
    brake_unit: str  # unit of brake, default "percentage"


class StateSpecs(TypedDict):
    """Observation of the episode."""

    observation_specs: ObservationSpecs
    unit_number: int
    unit_duration: int
    frequency: int


class ActionSpecs(TypedDict):
    """Action of the episode."""

    action_row_number: int
    action_column_number: int


class Plot(TypedDict):
    """Plot of the item specs"""

    character: str
    driver: str
    when: datetime
    tz: NotRequired[str]
    where: str
    state_specs: StateSpecs
    action_specs: ActionSpecs
    reward_specs: Dict[str, str]


class State(TypedDict):
    """State vector of the episode."""

    velocity: List[float]
    thrust: List[float]
    brake: List[float]


class Action(TypedDict):
    """Action of the episode."""

    action: List[float]


class ObservationRecordFlat(TypedDict):
    """Observation (Step) of the episode for RDPG"""

    timestamp: datetime
    observation: List[float]  # flat overlay of state, action, reward, next_state


class ObservationRecordPlain(TypedDict):
    """Observation (Step) of the episode for RDPG"""

    timestamp: datetime
    state: List[float]  # flat overlay of state, action, reward, next_state
    action: List[float]
    next_state: List[float]
    action_start_row: int
    reward: float


class ObservationDeep(TypedDict):
    """Observation (Step) of the episode for RDPG"""

    timestamp: datetime
    state: State
    action: Action
    action_start_row: int
    reward: float


class ObservationRecordDeep(ObservationDeep):
    """Observation (Step) of the episode for DDPG."""

    next_state: State


class Record(TypedDict):
    """Record of the observation"""

    _id: NotRequired[ObjectId]  # for record, _id is generated by pymongo, not required
    timestamp: datetime
    plot: Optional[Plot]
    observation: ObservationRecordDeep


class RecordPlain(TypedDict):
    """
    Record of the observation
    using np.ndarray
    """

    episode_starts: datetime
    plot: Optional[Plot]
    timestamps: ndarray
    states: ndarray
    actions: ndarray
    rewards: float
    next_states: ndarray
    table_start_rows: int


class StateActionReward(TypedDict):
    """State, action and reward of the episode"""

    timestamp: datetime
    states: ndarray
    actions: ndarray
    action_start_rows: int
    rewards: float


class Episode(TypedDict):
    """Episode of the record"""

    _id: NotRequired[ObjectId]  # for record, _id is generated by pymongo, not required
    start: datetime
    plot: Optional[Plot]
    history: list[ObservationDeep]  # length of the list is the length of the episode


class EpisodePlain(TypedDict):
    """Episode of the record"""

    start: datetime
    plot: Optional[Plot]
    state_action_reward: list[StateActionReward]


# ItemT = TypeVar("ItemT", bound=TypedDict)
ItemT = TypeVar('ItemT', Record, Episode, RecordPlain, EpisodePlain)
DBItemT = TypeVar('DBItemT', Record, Episode)
NPItemT = TypeVar('NPItemT', RecordPlain, EpisodePlain)
